{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resizable-layout",
  "type": "registry:component",
  "title": "Resizable Layout",
  "description": "Resizable and collapsible layout built with `react-resizable-panels`. Supports smooth animations, prevents layout shifts during server-side rendering, remembers panel sizes using cookies, and stays consistent after refresh.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "react-resizable-panels",
    "lucide-react"
  ],
  "registryDependencies": [
    "resizable",
    "button"
  ],
  "files": [
    {
      "path": "src/components/resizable-layout/index.tsx",
      "content": "\"use client\"\n\nimport React, { createContext, useCallback, useContext, useEffect, useRef, useState } from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { PanelLeftClose, PanelLeftOpen } from \"lucide-react\"\nimport { ImperativePanelHandle } from \"react-resizable-panels\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"../ui/button\"\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from \"../ui/resizable\"\nimport { updateResizableLayoutCookie } from \"./client-utils\"\n\n/* -------------------------------------------------------------------------- */\n/*                           ResizableLayoutContext                         z  */\n/* -------------------------------------------------------------------------- */\n\nexport type PanelState = {\n  [id: string]: boolean\n}\n\ntype PanelContextType = {\n  panels: PanelState\n  togglePanel: (id: string) => void\n  openPanel: (id: string) => void\n  closePanel: (id: string) => void\n}\n\nconst ResizableLayoutContext = createContext<PanelContextType | null>(null)\n\nfunction useResizableLayoutContext() {\n  const context = useContext(ResizableLayoutContext)\n  if (!context) {\n    throw new Error(\"useResizableLayoutContext must be used within a ResizableLayoutProvider.\")\n  }\n  return context\n}\n\n/* -------------------------------------------------------------------------- */\n/*                           ResizableLayoutProvider                          */\n/* -------------------------------------------------------------------------- */\n\ntype ResizableLayoutProviderProps = {\n  initialState?: PanelState\n  children: React.ReactNode\n}\n\nconst ResizableLayoutProvider = ({ initialState = {}, children }: ResizableLayoutProviderProps) => {\n  const [panels, setPanels] = useState<PanelState>(initialState)\n\n  const setPanelState = useCallback((id: string, isOpen: boolean) => {\n    setPanels((prev) => {\n      const newState = { ...prev, [id]: isOpen }\n      if (typeof document !== \"undefined\") {\n        updateResizableLayoutCookie({ panelId: id, isOpen: isOpen })\n      }\n\n      return newState\n    })\n  }, [])\n\n  const togglePanel = useCallback(\n    (id: string) => {\n      setPanelState(id, !panels[id])\n    },\n    [panels, setPanelState],\n  )\n\n  const openPanel = useCallback(\n    (id: string) => {\n      setPanelState(id, true)\n    },\n    [setPanelState],\n  )\n\n  const closePanel = useCallback(\n    (id: string) => {\n      setPanelState(id, false)\n    },\n    [setPanelState],\n  )\n\n  return (\n    <ResizableLayoutContext.Provider value={{ panels, togglePanel, openPanel, closePanel }}>\n      {children}\n    </ResizableLayoutContext.Provider>\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                            ResizableLayoutGroup                            */\n/* -------------------------------------------------------------------------- */\n\nconst ResizableLayoutGroup = ({\n  children,\n  onLayout,\n  defaultLayout,\n  ...props\n}: React.ComponentProps<typeof ResizablePanelGroup> & {\n  defaultLayout?: number[]\n}) => {\n  const handleOnLayout = (sizes: number[]) => {\n    onLayout?.(sizes)\n    updateResizableLayoutCookie({ sizes: sizes })\n  }\n\n  let panelIndex = 0\n\n  const kids = React.Children.map(children, (child) => {\n    const isValid = React.isValidElement(child)\n\n    if (!isValid) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn(\n          \"[ResizableLayoutGroup]: One or more children are not valid React elements. \" +\n            \"Only <ResizableLayoutPanel> and <ResizableLayoutContent> are supported as children. \" +\n            \"Unexpected children may cause layout flickering or hydration issues.\",\n        )\n      }\n      return child\n    }\n\n    const newProps: { defaultSize?: number } = {}\n    if (defaultLayout?.[panelIndex] !== undefined) {\n      newProps.defaultSize = defaultLayout[panelIndex]\n    }\n    panelIndex++\n\n    return React.cloneElement(child, newProps)\n  })\n\n  return (\n    <ResizablePanelGroup onLayout={handleOnLayout} {...props}>\n      {kids}\n    </ResizablePanelGroup>\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                            ResizableLayoutPanel                            */\n/* -------------------------------------------------------------------------- */\n\ntype ResizableLayoutPanelProps = {\n  id: string\n  minSize?: number\n  side: \"left\" | \"right\"\n  collapseOnResize?: boolean\n  disableTransition?: boolean\n} & React.ComponentProps<typeof ResizablePanel>\n\nconst ResizableLayoutPanel = ({\n  id,\n  className,\n  children,\n  minSize = 20,\n  defaultSize = 25,\n  maxSize = 30,\n  side,\n  collapseOnResize = false,\n  disableTransition = false,\n  ...props\n}: ResizableLayoutPanelProps) => {\n  const panelRef = useRef<ImperativePanelHandle>(null)\n  const [isResizing, setIsResizing] = useState(false)\n  const { panels, openPanel, closePanel } = useResizableLayoutContext()\n\n  const isOpen = panels[id] ?? false\n\n  useEffect(() => {\n    const panel = panelRef.current\n\n    if (!panel) return\n\n    if (isOpen && panel.isCollapsed()) {\n      console.log(\"isOpen = true and panel is collapsed, now expending the panel\")\n      panel.expand()\n    } else if (!isOpen && !panel.isCollapsed()) {\n      console.log(\"isOpen = true and panel is expended, now collapsing the panel\")\n      panel.collapse()\n    }\n  }, [isOpen])\n\n  const resizableHandle = (\n    <ResizableHandle\n      className={cn(\n        \"after:bg-border pointer-events-none relative hidden w-3 bg-transparent p-0 after:absolute after:top-1/2 after:right-0 after:h-8 after:w-[6px] after:-translate-y-1/2 after:rounded-full after:transition-all after:hover:h-10\",\n        isOpen && \"block aria-[valuenow=0]:hidden\",\n        side === \"left\" ? \"after:-translate-x-px\" : \"after:-translate-x-1\",\n      )}\n      onDragging={setIsResizing}\n    />\n  )\n\n  const handleResize = (size: number) => {\n    // Prevent collapsing below minSize unless intended\n    if (size < minSize && panelRef.current && isResizing && !collapseOnResize) {\n      panelRef.current.resize(minSize)\n    }\n  }\n\n  return (\n    <>\n      {side === \"right\" && resizableHandle}\n      <ResizablePanel\n        ref={panelRef}\n        className={cn(\n          isOpen && side === \"right\" && \"border-l\",\n          isOpen && side === \"left\" && \"border-r\",\n          !disableTransition && !isResizing && \"transition-[flex] duration-300 ease-in-out\",\n          className,\n        )}\n        minSize={minSize}\n        defaultSize={defaultSize}\n        maxSize={maxSize}\n        collapsible\n        onResize={handleResize}\n        onCollapse={() => {\n          if (collapseOnResize && isOpen) closePanel(id)\n        }}\n        onExpand={() => {\n          if (collapseOnResize && !isOpen) openPanel(id)\n        }}\n        data-state={isOpen ? \"open\" : \"closed\"}\n        {...props}>\n        {children}\n      </ResizablePanel>\n      {side === \"left\" && resizableHandle}\n    </>\n  )\n}\n\nResizableLayoutPanel.displayName = \"ResizableLayoutPanel\"\n\n/* -------------------------------------------------------------------------- */\n/*                           ResizableLayoutContent                           */\n/* -------------------------------------------------------------------------- */\n\nconst ResizableLayoutContent = ({\n  defaultSize = 75,\n  minSize = 70,\n  maxSize = 100,\n  className,\n  disableTransition = false,\n  ...props\n}: React.ComponentProps<typeof ResizablePanel> & {\n  disableTransition?: boolean\n}) => {\n  return (\n    <ResizablePanel\n      defaultSize={defaultSize}\n      minSize={minSize}\n      maxSize={maxSize}\n      className={cn(!disableTransition && \"transition-[flex] duration-300 ease-in-out\", className)}\n      {...props}\n    />\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                           ResizableLayoutTrigger                           */\n/* -------------------------------------------------------------------------- */\n\ntype ResizableLayoutTriggerProps = {\n  id: string\n} & React.ComponentProps<typeof Button>\n\nconst ResizableLayoutTrigger = ({ id, onClick, children, ...props }: ResizableLayoutTriggerProps) => {\n  const { panels, togglePanel } = useResizableLayoutContext()\n  const isOpen = panels[id] ?? false\n  const buttonContent = isOpen ? <PanelLeftClose /> : <PanelLeftOpen />\n\n  return (\n    <Button\n      onClick={(e) => {\n        onClick?.(e)\n        togglePanel(id)\n      }}\n      size=\"icon\"\n      data-state={isOpen ? \"open\" : \"closed\"}\n      {...props}>\n      {children ? children : buttonContent}\n    </Button>\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                      ResizableLayoutOpen / Close                           */\n/* -------------------------------------------------------------------------- */\n\ntype ResizableLayoutActionProps = {\n  id: string\n  asChild?: boolean\n} & React.ComponentProps<\"button\">\n\nconst ResizableLayoutOpen = ({ id, onClick, asChild = false, ...props }: ResizableLayoutActionProps) => {\n  const Comp = asChild ? Slot : \"button\"\n  const { openPanel } = useResizableLayoutContext()\n\n  return (\n    <Comp\n      onClick={(e) => {\n        onClick?.(e)\n        openPanel(id)\n      }}\n      {...props}\n    />\n  )\n}\n\nconst ResizableLayoutClose = ({ id, onClick, asChild, ...props }: ResizableLayoutActionProps) => {\n  const Comp = asChild ? Slot : \"button\"\n  const { closePanel } = useResizableLayoutContext()\n\n  return (\n    <Comp\n      onClick={(e) => {\n        onClick?.(e)\n        closePanel(id)\n      }}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ResizableLayoutClose,\n  ResizableLayoutContent,\n  ResizableLayoutGroup,\n  ResizableLayoutOpen,\n  ResizableLayoutPanel,\n  ResizableLayoutProvider,\n  ResizableLayoutTrigger,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/resizable-layout/client-utils.ts",
      "content": "\"use client\"\n\nimport { RESIZABLE_COOKIE_MAX_AGE, RESIZABLE_LAYOUT_COOKIE_NAME, ResizableLayoutCookieData } from \"./constants\"\n\n/**\n * Updates the resizable layout cookie with new panel states or sizes.\n * This function is intended for client-side usage.\n * @param options.panelId The ID of the panel to update its state.\n * @param options.isOpen The new open state for the panel.\n * @param options.sizes The new array of sizes for all panels.\n */\nexport function updateResizableLayoutCookie({\n  panelId,\n  isOpen,\n  sizes,\n}: {\n  panelId?: string\n  isOpen?: boolean\n  sizes?: number[]\n}) {\n  if (typeof document === \"undefined\") {\n    return\n  }\n\n  let currentData: ResizableLayoutCookieData = { states: {}, sizes: [] }\n\n  // Read existing cookie data\n  const cookieString = document.cookie.split(\"; \").find((row) => row.startsWith(`${RESIZABLE_LAYOUT_COOKIE_NAME}=`))\n\n  if (cookieString) {\n    try {\n      const encodedValue = cookieString.split(\"=\")[1]\n      currentData = JSON.parse(decodeURIComponent(encodedValue))\n      // Ensure states and sizes properties exist\n      if (!currentData.states) {\n        currentData.states = {}\n      }\n      if (!currentData.sizes) {\n        currentData.sizes = []\n      }\n    } catch (error) {\n      console.error(\"Failed to parse resizable layout cookie:\", error)\n      // Fallback to default empty data if parsing fails\n      currentData = { states: {}, sizes: [] }\n    }\n  }\n\n  if (panelId !== undefined && isOpen !== undefined) {\n    currentData.states[panelId] = isOpen\n  }\n\n  if (sizes !== undefined) {\n    currentData.sizes = sizes\n  }\n\n  const updatedCookieValue = encodeURIComponent(JSON.stringify(currentData))\n\n  document.cookie = `${RESIZABLE_LAYOUT_COOKIE_NAME}=${updatedCookieValue}; path=/; max-age=${RESIZABLE_COOKIE_MAX_AGE}; SameSite=Lax; Secure`\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/components/resizable-layout/server-utils.ts",
      "content": "\"use server\"\n\nimport { cookies } from \"next/headers\"\nimport { RESIZABLE_LAYOUT_COOKIE_NAME, ResizableLayoutCookieData } from \"./constants\"\n\n/**\n * Reads the resizable layout cookie data from the server-side request headers.\n * This function is intended for server-side usage (e.g., in Next.js Server Components or Route Handlers).\n * @returns The parsed cookie data, or default empty data if not found or invalid.\n */\nexport async function getServerSideResizableLayoutCookieData(\n  defaultData: Partial<ResizableLayoutCookieData> = {},\n): Promise<ResizableLayoutCookieData> {\n  const cookieStore = await cookies()\n  const cookieValue = cookieStore.get(RESIZABLE_LAYOUT_COOKIE_NAME)?.value\n\n  const defaults: ResizableLayoutCookieData = {\n    states: defaultData.states ?? {},\n    sizes: defaultData.sizes ?? [],\n  }\n\n  if (!cookieValue) {\n    return defaults\n  }\n\n  try {\n    const parsedData: ResizableLayoutCookieData = JSON.parse(decodeURIComponent(cookieValue))\n\n    const states = parsedData.states && Object.keys(parsedData.states).length > 0 ? parsedData.states : defaults.states\n    const sizes = parsedData.sizes && parsedData.sizes.length > 0 ? parsedData.sizes : defaults.sizes\n\n    return {\n      states,\n      sizes,\n    }\n  } catch (error) {\n    console.error(\"Failed to parse server-side resizable layout cookie:\", error)\n    return defaults\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/components/resizable-layout/constants.ts",
      "content": "export const RESIZABLE_LAYOUT_COOKIE_NAME = \"resizable_layout\"\nexport const RESIZABLE_COOKIE_MAX_AGE = 60 * 60 * 24 * 7 // 7 days\n\nexport interface ResizableLayoutCookieData {\n  states: Record<string, boolean>\n  sizes: number[]\n}\n",
      "type": "registry:lib"
    }
  ]
}